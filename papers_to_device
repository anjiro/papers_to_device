#!/usr/bin/env python

import subprocess, os, shutil, re, cPickle, sys, time
from colortext import colortext

global _debug
_debug = False

def c(s):
	return colortext(s, 'cyan')
def y(s):
	return colortext(s, 'yellow')
def r(s):
	return colortext(s, 'red')

def debug(m):
	if not _debug:
		return
	sys.stderr.write(r(m + '\n'))

def t(x):
	from datetime import datetime
	return datetime.fromtimestamp(x).strftime('%D %T')


def search_parents(path, filename):
  """Search path and its parents for the given filename. Return the
  full absolute path to the file, including the filename. Return None if
  the root of the drive is reached and nothing is found."""
  f = os.path.basename(filename)
  if f != filename:
    raise NameError("Filename must be without path")
  c = os.path.join(path, f)
  if os.path.exists(c):
    return c
  p = os.path.abspath(os.path.normpath(os.path.join(path, os.path.pardir)))
  if p == path:
    return None
  return search_parents(p, filename)


def get_papers():
	script = """
	set z to ""
	tell application "Papers"
		repeat with p in (selected publications of front library window as list)
			if p's primary file item is not missing value then
				set original_filename to the full path of the primary file item of p
				set new_filename to my strip(the publication year of p) & "-" & my strip(the family name of the first author item of p) & " - " & my strip(the title of p) & ".pdf"
				set l to original_filename & "	" & new_filename
				set z to z & "\n" & l
			end if
		end repeat
	end tell
	return z

	on strip(str)
		local str, whiteSpace
		try
			set str to str as string
			set whiteSpace to {character id 10, return, space, tab}
			try
				repeat while str's first character is in whiteSpace
					set str to str's text 2 thru -1
				end repeat
				repeat while str's last character is in whiteSpace
					set str to str's text 1 thru -2
				end repeat
				return str
			on error number -1728
				return ""
			end try
		on error eMsg number eNum
			error "Can't strip: " & eMsg number eNum
		end try
	end strip
"""

	osa = subprocess.Popen(['osascript', '-'],
												 stdin=subprocess.PIPE,
												 stdout=subprocess.PIPE,
												 stderr=subprocess.PIPE)
	o,e = osa.communicate(script)

	if e:
		raise IOError("ERROR: %s" % e)

	return [p.strip().split('\t') for p in o.split('\n') if p]


def verify_corrdict(root, pfile, test=False):
	"""Verify that all papers in the corrdict are present on both source
	and destination. If test is not False, remove papers from the dict
	that have either source or dest file missing; leave actual files on
	disk alone."""
	#Open the corrdict
	try:
		cd = cPickle.load(open(pfile))
	except IOError:
		cd = {}

	badfiles = set()

	for d, origfn in cd.iteritems():
		destfn = os.path.join(root, d)
		if not os.path.exists(destfn):
			debug("Missing paper file on {root}: {destfn}".format(root=root,
				destfn=destfn))
			badfiles.add(d)
		if not os.path.exists(origfn):
			debug("Missing file in Papers: {origfn}".format(origfn=origfn))
			badfiles.add(d)

	if test:
		from pprint import pprint
		print "Would remove the following keys from the corrdict:"
		pprint(badfiles)
	else:
		for k in badfiles:
			print 'del cd[%s]' % k
			del(cd[k])
		cPickle.dump(cd, open(pfile, 'w'),  cPickle.HIGHEST_PROTOCOL)


def papers_to_dir(dest, root=None, corrdict='.papers.pickle', test=False):
	"""Copy papers from Papers to dest, updating correspondence dict on
	root/.papers.pickle. If root is None, search parent directories of
	dest to find corrdict. Don't overwrite files newer than Papers
	source."""
	#Find the corrdict
	if root is None:
		pfile = search_parents(dest, corrdict)
		debug("Found pickle file at %s" % pfile)
		if pfile is None:
			sys.stderr.write(r("Couldn't find dictionary %s; specify root" % corrdict))
			sys.exit(-1)
		root = os.path.dirname(pfile)
	else:
		pfile = os.path.join(root, corrdict)
		debug("Set pickle file to %s" % pfile)

	verify_corrdict(root, pfile, test)

	#Open the corrdict
	try:
		cd = cPickle.load(open(pfile))
	except IOError:
		cd = {}
	update_pickle = False

	papernames = {os.path.basename(k): k for k in cd.keys()}

	if not os.path.exists(dest):
		os.makedirs(dest)

	#Fetch selected papers from Papers and operate on each
	for origfn,d in get_papers():
		papername = re.sub(':\s', ' - ', d)
		destfn   = os.path.join(dest, papername)  #remove colons in names
		destpath = os.path.relpath(destfn, root)
		if papername in papernames:
			debug("%s already in %s, not copying" % (c(papername),
					os.path.dirname(papernames[papername])))
			continue
		cd[destpath] = origfn

		#Don't update changed or older files
		if os.path.exists(destfn):
			otime = os.stat(origfn).st_mtime 
			dtime = os.stat(destfn).st_mtime
			if otime == dtime:
				debug("Not updating unchanged files\n  %s\nand\n  %s\n" % (
					c(destfn), y(origfn)))
				continue
			elif otime > dtime:
				debug("WARNING: Not overwriting newer file\n  %s\nwith older\n %s\n" % (
					c(destfn), y(origfn)))
				continue

		print c(os.path.basename(destfn))
		update_pickle = True

		#Try to copy the file. Sometimes the USB connection seems to get
		# overwhelmed, so try up to 3 times with a .5s pause in between.
		if not test:
			tries = 0
			err = (None, None, None)
			while tries < 3:
				try:
					shutil.copy2(origfn, destfn)
				except OSError as (errno, strerr):
					if errno == 22:
						sys.stderr.write("OSError, will try again")
						err = sys.exc_info()
						p = subprocess.Popen("sync", shell=True)
						sts = os.waitpid(p.pid, 0)[1]
						time.sleep(.5)
						tries += 1
					else:
						raise
				else:
					break
			if tries >= 3:
				raise err[0], err[1], err[2]

	if update_pickle:
		if test:
			from pprint import pprint
			print "Would pickle the following to %s" % corrdict
			pprint(cd)
		else:
			cPickle.dump(cd, open(pfile, 'w'),  cPickle.HIGHEST_PROTOCOL)


def papers_from_dir(root, corrdict='.papers.pickle', test=False):
	"""Copy papers indicated in corrdict on root to original
	destinations if:
		- destination file still exists
		- file on root has changed
	Update corrdict to remove missing files on root.
	"""
	pfile = os.path.join(root, corrdict)
	verify_corrdict(root, pfile, test)
	cd = cPickle.load(open(pfile))
	debug("Loaded %d papers from %s" % (len(cd.keys()), pfile))
	del_list = []
	update_pickle = False

	for destfn, origfn in cd.iteritems():
		destfn_path = os.path.join(root, destfn)
		if os.path.exists(origfn):
			if os.stat(destfn_path).st_mtime > os.stat(origfn).st_mtime:
				 print "%s =>\n  %s" % (c(os.path.basename(destfn_path)),
					 y(os.path.basename(origfn)))
				 if not test:
					 shutil.copy2(destfn_path, origfn)
			else:
				debug("Not copying %s => %s\n    %s <= %s" % (
					os.path.basename(destfn_path), os.path.basename(origfn),
					t(os.stat(destfn_path).st_mtime), t(os.stat(origfn).st_mtime)))
		else:
			print "Remove from dict\n    %s\n because original file\n %s\nis missing" %\
				(destfn, origfn)
			del_list.append(destfn)
			update_pickle = True

	if update_pickle:
		for destfn in del_list:
			del(cd[destfn])
		if test:
			from pprint import pprint
			print "Would pickle the following to %s\n" % pfile
			pprint(cd)
		else:
			cPickle.dump(cd, open(pfile, 'w'),  cPickle.HIGHEST_PROTOCOL)


if __name__ == "__main__":
	import argparse

	p = argparse.ArgumentParser(
		description="Copy Papers files to or from a location")
	g = p.add_mutually_exclusive_group(required=True)
	g.add_argument('-t', action='store_true',
		help="Copy currently-selected papers from Papers to location")
	g.add_argument('-f', action='store_true',
		help="Copy all updated papers from location to Papers database")
	p.add_argument('-n', action='store_true',
		help="Don't copy files but show what would have been done")
	p.add_argument('-d', action='store_true',
		help="Show debug messages")
	p.add_argument('dir',
		help="Directory for files to be copied to with -t or from with -f")
	p.add_argument('root', nargs='?',
		help="Directory where correspondence between Papers and copied files will be stored")

	if not sys.argv[1:]:
		p.print_help()
		sys.exit(0)

	args = p.parse_args()
	#args.root = args.root or args.dir
	_debug = args.d

	if args.t:
		papers_to_dir(args.dir, args.root, test=args.n)
	elif args.f:
		papers_from_dir(args.dir, test=args.n)
